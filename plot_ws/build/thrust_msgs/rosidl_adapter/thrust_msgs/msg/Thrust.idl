// generated from rosidl_adapter/resource/msg.idl.em
// with input from thrust_msgs/msg/Thrust.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module thrust_msgs {
  module msg {
    struct Thrust {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        " thrust measurement")
      @unit (value="N")
      double thrust_meas;

      @verbatim (language="comment", text=
        " thrust command sent to the system")
      @unit (value="N")
      double thrust_comm;

      @verbatim (language="comment", text=
        " controller's output thrust")
      @unit (value="N")
      double thrust_comp;

      @verbatim (language="comment", text=
        " lowpass filter coef between 0 and 1")
      double alpha;

      @verbatim (language="comment", text=
        " proportionnal coef of the controller")
      double kp;

      @verbatim (language="comment", text=
        " integral coef of the controller")
      double ki;

      @verbatim (language="comment", text=
        " derivative coef of the controller")
      double kd;

      @verbatim (language="comment", text=
        " feedforward  coef of the controller")
      double kff;

      @verbatim (language="comment", text=
        " 10 bits encoded PWM sent to the ESC")
      uint16 pulse;

      @verbatim (language="comment", text=
        " 0 to send just a thrust command," "\n"
        " 1 to send a controller configuration w/out a command" "\n"
        " 2 to disable the controller and stop the motor" "\n"
        " 3 to tare the sensor")
      uint16 mode;
    };
  };
};
